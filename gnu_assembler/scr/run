#!/usr/bin/env python3
"""Compile, link, run."""


import os
import sys
from typing import List
from typing import Tuple
import logging
import argparse
import pathlib


log = logging.getLogger()


def compile(src_names: List[str]) -> Tuple[str, List[str], str]:
    """Compile.

    Return tuple of main compiler, object file paths, executable file
    path (main compiler depends on format of file containing program
    entry point).
    """


def link(main_comp: str, obj_paths: List[str], exe_path: str) -> None:
    """Link."""


def run(exe_file_path: str) -> None:
    """Run."""


def main() -> int:
    """Main."""

    # Setup.

    log.setLevel(logging.DEBUG)

    arg_parser = argparse.ArgumentParser(prog=pathlib.PurePosixPath(__file__).stem,
                                         description=sys.modules[__name__].__doc__,
                                         epilog=("File paths are calculated relative to "
                                                 "current working directory."),
                                         formatter_class=argparse.MetavarTypeHelpFormatter)
    arg_parser.add_argument("src_names", type=str, nargs="+",
                            help="Source file names.")
    arg_parser.add_argument("-l", "--link-flags", type="str",
                            help="Linker flags, values.")
    args = arg_parser.parse_args()

    # Program.

    (main_comp, obj_paths, exe_path) = compile(args.src_names)
    link(main_comp, obj_paths, exe_path)
    run(exe_path)

    # Teardown.

    log.handlers.clear()

    return 0


if __name__ == "__main__":
    sys.exit(main)
